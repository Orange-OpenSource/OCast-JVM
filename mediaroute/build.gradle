apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jetbrains.dokka-android'
apply plugin: 'maven-publish'
apply from: project.file('../ktlint.gradle')
apply from: project.file('../bintray.gradle')

androidExtensions {
    experimental = true
}

buildscript {
    apply from: project.file('../dependencies.gradle')
    apply from: project.file('../publish.gradle')

    description = "OCast Android media route"
    ext.package_name = "ocast-jvm-mediaroute"
    version = version_name
    group = group_name

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-android-gradle-plugin:$dokka_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version"
    }
}

repositories {
    jcenter()
}

android {
    compileSdkVersion compile_sdk_version

    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode 200
        versionName version
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        encoding 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xjvm-default=enable']
        allWarningsAsErrors = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${archivesBaseName}-${version}-${variant.buildType.name}.aar"
        }
    }
}

dependencies {
    implementation project(':sdk')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.legacy:legacy-support-v4:$legacy_support_version"
    implementation "androidx.appcompat:appcompat:$app_compat_version"
    implementation "androidx.mediarouter:mediarouter:$media_router_version"
    implementation "androidx.multidex:multidex:$multidex_version"

    androidTestImplementation "androidx.test:runner:$runner_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_kotlin_version"
    androidTestImplementation "org.powermock:powermock-api-mockito2:$powermock_version"

    testImplementation "androidx.multidex:multidex:$multidex_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_core_version"
}

allprojects {
    configurations.all {
        resolutionStrategy {
            force("org.objenesis:objenesis:2.6")
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    jdkVersion = 8
    dependsOn ':sdk:dokka'
    externalDocumentationLink {
        url = new URL("file://${project(":sdk").buildDir}/javadoc/")
    }
    externalDocumentationLink {
        url = new URL("https://developer.android.com/reference/androidx/")
    }
}

task javadocJar(type: Jar, group: "build", dependsOn: dokka) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

publishing.publications {
    android.libraryVariants.all { variant ->
        if (variant.buildType.name == "release") {
            mavenJava(MavenPublication) {
                groupId project.group
                artifactId project.name
                version project.version

                artifact variant.packageLibraryProvider.get().archivePath
                artifact sourcesJar
                artifact javadocJar

                pom.withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    def root = asNode()
                    root.appendNode('description', project.description)
                    root.appendNode('name', package_name)
                    root.appendNode('url', url_name)
                    root.children().last() + pomConfig
                    configurations.implementation.allDependencies.each {
                        if (it.group == null) return
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}
