apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply plugin: 'checkstyle'
apply from: project.file('../ktlint.gradle')

buildscript {
    apply from: project.file('../dependencies.gradle')
    apply from: project.file('../publish.gradle')

    description = "OCast SDK"
    ext.package_name = "ocast-jvm-sdk"
    version = version_name
    group = group_name


    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

checkstyle {
    toolVersion checkstyle_version
    maxWarnings = 0
}

sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
}

jar {
    from "$rootDir/LICENSE.txt"
    manifest {
        attributes('Implementation-Title': package_name, 'Implementation-Version': project.version, 'Implementation-Vendor': vendor_name)
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    api "org.json:json:$json_version"
    api "com.squareup.okhttp3:okhttp:$okhttp_version"
    api "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
    api "com.fasterxml.jackson.datatype:jackson-datatype-json-org:$jackson_version"

    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_core_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_kotlin_version"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okhttp_version"
    testImplementation "org.powermock:powermock-module-junit4:$powermock_version"
    testImplementation "org.powermock:powermock-api-mockito2:$powermock_version"
    testImplementation "org.hamcrest:hamcrest-all:$harmcrest_version"
}

repositories {
    mavenCentral()
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xjvm-default=enable']
        allWarningsAsErrors = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xjvm-default=enable']
        allWarningsAsErrors = true
    }
}

compileJava {
    options.compilerArgs << "-Xlint:all" << "-Werror"
}

task testReport(type: TestReport) {
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
    finalizedBy testReport
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task testJar(type: Jar) {
    classifier = 'test'
    from sourceSets.test.output
}

artifacts {
    testRuntime testJar
}

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    jdkVersion = 8
    externalDocumentationLink {
        url = new URL("https://square.github.io/okhttp/3.x/okhttp/")
    }
    externalDocumentationLink {
        url = new URL("https://fasterxml.github.io/jackson-databind/javadoc/2.9/")
    }
}

task javadocJar(type: Jar, group: "build", dependsOn: dokka) {
    classifier = 'javadoc'
    from "$buildDir/javadoc"
}

publishing.publications {
    mavenJava(MavenPublication) {
        from components.java
        artifact sourcesJar
        artifact javadocJar

        pom.withXml {
            def root = asNode()
            root.appendNode('description', project.description)
            root.appendNode('name', package_name)
            root.appendNode('url', url_name)
            root.children().last() + pomConfig
        }
    }
}
